{"ast":null,"code":"import _slicedToArray from \"/Users/Macbook/WebstormProjects/mfg-4b-sz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Macbook/WebstormProjects/mfg-4b-sz/src/components/Store/Ordering/Cooking.js\";\nimport React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MaterialTable from 'material-table';\nimport axios from './../../../api/axiosClient';\nimport { useStateValue } from './../../../global/state';\nconst useStyles = makeStyles(theme => ({\n  clicked: {\n    disabled: true\n  },\n  button: {\n    margin: theme.spacing(0.5),\n    whiteSpace: 'nowrap',\n    backgroundColor: '#e3c768',\n    color: 'white'\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n    backgroundColor: '#e31b2f',\n    color: 'white'\n  },\n  close: {\n    padding: theme.spacing(0.5)\n  }\n}));\n\nconst Cooking = props => {\n  const classes = useStyles();\n  const columnMetaData = [\n  /*\n  {\n      title: 'Action',\n      field: 'action',\n      render: props => (\n          <div>\n              <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  onClick={(e,rowData) => {\n                      console.log('cooking button clicked');\n                      console.log(e);\n                      console.log(rowData);\n                  }} //props.onChange(e.target.value)\n              >\n                  Ready to pickup\n              </Button>\n          </div>\n      ),\n       cellStyle: {\n          padding: '3px 1px 3px 1px',\n      }\n  },\n  */\n  {\n    title: 'Id',\n    field: 'databaseId',\n    hidden: true\n  }, {\n    title: 'Status',\n    field: 'status',\n    cellStyle: {\n      //backgroundColor: '#e31b2f',\n      //color: 'white'\n      textAlign: 'center',\n      padding: '1px 1px 1px 1px'\n    },\n    render: props => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Chip, {\n      label: \"Cooking\",\n      className: classes.chip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))\n  }, {\n    title: 'Order ID',\n    field: 'orderName' //lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\n\n  }, {\n    title: 'Order Time',\n    field: 'orderTime',\n    type: 'datetime',\n    cellStyle: {\n      padding: '1px 1px 1px 1px'\n    }\n  }, {\n    title: 'Remark',\n    field: 'future',\n    cellStyle: {\n      padding: '1px 1px 1px 1px'\n    }\n  }, {\n    title: 'Gross Total',\n    field: 'grossTotal',\n    type: 'currency',\n    currencySetting: {\n      currencyCode: 'THB'\n    }\n  }]; //Global state\n\n  const _useStateValue = useStateValue(),\n        _useStateValue2 = _slicedToArray(_useStateValue, 2),\n        _useStateValue2$ = _useStateValue2[0],\n        appState = _useStateValue2$.appState,\n        dataState = _useStateValue2$.dataState,\n        dispatch = _useStateValue2[1]; //Local state     //const [intervalId,setIntervalId] = React.useState();\n  //Hook use Local state\n\n\n  const _React$useState = React.useState({\n    columns: columnMetaData,\n    data: [//{ status: 'cooking', future: '2019-07-17 13:30:15' , orderTime: '2019-07-17 13:00:15',storeName: 'Lab Avani', orderName: 'TPC ref 12345', grossTotal: \"323.25\", refID: \"12345\" },\n    ]\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        isLoading = _React$useState4[0],\n        setIsLoading = _React$useState4[1]; //Data isloading when button has beenclicked\n  //loading data every interval\n\n\n  useEffect(() => {\n    async function freshOrdersInStore() {\n      var cuurentCooking = [...dataState.order_instore].filter(order => {\n        return (order.cookingFinishTime === null || order.cookingFinishTime === '') && (order.pickupFinishTime === null || order.pickupFinishTime === '');\n      });\n      var queryAPI = [];\n      let get_url = '/api/v1/store/orders/1112delivery/' + appState.sitegroup + '/' + appState.store;\n      console.group('GET ' + get_url);\n      await axios.get(get_url).then(response => {\n        if (response.data) {\n          var results = response.data;\n          console.group('API return :');\n          console.log(results);\n          console.groupEnd();\n\n          if (results.length > 0) {\n            dispatch({\n              type: 'FRESH_ORDER_INSTORE_SUCCESS',\n              data: results\n            });\n            queryAPI = [...results].filter(order => {\n              return (order.cookingFinishTime === null || order.cookingFinishTime === '') && (order.pickupFinishTime === null || order.pickupFinishTime === '');\n            });\n            ;\n          }\n\n          console.group('GlobalStateObject');\n          console.log(appState);\n          console.log(dataState);\n          console.groupEnd();\n        }\n      }).then(() => {\n        //Show snackbar if have new orders\n        if (queryAPI.length > cuurentCooking.length) {\n          let diff = queryAPI.length - cuurentCooking.length;\n          dispatch({\n            type: 'SNACKBAR',\n            data: {\n              open: true,\n              msg: 'You have new ' + diff + ' order(s)'\n            }\n          });\n        }\n      }).then(() => {\n        //Map data appstate to cooking line\n        var orders = dataState.order_instore.length > 0 ? [...dataState.order_instore] : [];\n        var cookingOrders = orders.filter(order => {\n          return (order.cookingFinishTime === null || order.cookingFinishTime === '') && (order.pickupFinishTime === null || order.pickupFinishTime === '');\n        }); //console.log(cookingOrders);\n\n        const cookingRows = cookingOrders.map(row => {\n          var raw = JSON.parse(row.json);\n          return {\n            databaseId: row.id,\n            status: 'cooking',\n            orderName: row.orderName,\n            orderTime: row.tranDate,\n            future: row.orderType === 0 ? '' : row.dueDate,\n            grossTotal: raw.SDM.GrossTotal\n          };\n        });\n        console.group('Rendering meterial-table ' + cookingRows.length + ' record(s)');\n        console.log(cookingRows);\n        console.groupEnd();\n        setState({\n          columns: columnMetaData,\n          data: [...cookingRows]\n        });\n      }).catch(error => {\n        console.group('API Error :');\n        console.log(error);\n        console.groupEnd();\n      });\n      console.groupEnd();\n    }\n\n    freshOrdersInStore();\n    let id = setInterval(function () {\n      freshOrdersInStore();\n    }, dataState.interval); //setIntervalId(id);\n\n    return function cleanup() {\n      clearInterval(id);\n    };\n  }, []); //On click button action\n\n  async function readyToPickupHandle(id, orderId) {\n    let put_url = '/api/v1/store/order/1112delivery/' + id + '/cooking';\n    console.group('PUT ' + put_url);\n    await axios.put(put_url, {\n      orderName: orderId\n    }).then(response => {\n      var results = response.data;\n      console.group('API return :');\n      console.log(results);\n      console.groupEnd(); //Removing rowId\n\n      var copyState = [...state.data];\n      var removed = copyState.filter(order => {\n        return order.databaseId !== id;\n      });\n      console.group('RowID[' + id + ' was removed');\n      console.groupEnd();\n      setState({\n        columns: columnMetaData,\n        data: removed\n      });\n      setIsLoading(false);\n      console.group('Rendering meterial-table');\n      console.log(removed);\n      console.groupEnd();\n    }).catch(error => {\n      console.group('API Error :');\n      console.log(error);\n      console.groupEnd();\n    });\n    console.groupEnd();\n  }\n\n  return React.createElement(MaterialTable, {\n    title: \"Cooking\",\n    isLoading: isLoading,\n    columns: state.columns,\n    data: state.data,\n    actions: [rowData => ({\n      icon: () => {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }, React.createElement(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        }, \"Ready to pickup\"));\n      },\n      tooltip: 'Ready to Pickup',\n      onClick: (event, rowData) => {\n        setIsLoading(true);\n        readyToPickupHandle(rowData.databaseId, rowData.orderName);\n      }\n    })],\n    actionsColumnIndex: \"1\",\n    filtering: \"true\",\n    options: {\n      padding: 'dense',\n      pageSize: 10,\n      search: false,\n      showTitle: false\n      /*\n      rowStyle: rowData => {\n                              return {};                //if(rowData.status === \"\") {\n                              //    return {backgroundColor: 'red'};\n                              //}\n                           }\n       */\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  });\n};\n\nexport default Cooking;\n/*\n//Map rows of freshing database to data table list to display\nuseMemo(() => {\n},[appState.order_instore]);\n*/\n\n/*\nuseEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    //[componentWillMount ,componentDidMount ,componentDidUpdate]\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n\n    //[componentWillUnmount()]\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  .MuiTableCell-sizeSmall {\n        padding: 1px 1px 1px 1px;\n    }\n  */","map":{"version":3,"sources":["/Users/Macbook/WebstormProjects/mfg-4b-sz/src/components/Store/Ordering/Cooking.js"],"names":["React","useEffect","Button","Chip","makeStyles","MaterialTable","axios","useStateValue","useStyles","theme","clicked","disabled","button","margin","spacing","whiteSpace","backgroundColor","color","chip","close","padding","Cooking","props","classes","columnMetaData","title","field","hidden","cellStyle","textAlign","render","type","currencySetting","currencyCode","appState","dataState","dispatch","useState","columns","data","state","setState","isLoading","setIsLoading","freshOrdersInStore","cuurentCooking","order_instore","filter","order","cookingFinishTime","pickupFinishTime","queryAPI","get_url","sitegroup","store","console","group","get","then","response","results","log","groupEnd","length","diff","open","msg","orders","cookingOrders","cookingRows","map","row","raw","JSON","parse","json","databaseId","id","status","orderName","orderTime","tranDate","future","orderType","dueDate","grossTotal","SDM","GrossTotal","catch","error","setInterval","interval","cleanup","clearInterval","readyToPickupHandle","orderId","put_url","put","copyState","removed","rowData","icon","tooltip","onClick","event","pageSize","search","showTitle"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core'\nimport Chip from '@material-ui/core/Chip';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport MaterialTable from 'material-table';\nimport axios from './../../../api/axiosClient';\nimport {useStateValue} from './../../../global/state'\n\n\nconst useStyles = makeStyles(theme => ({\n    clicked: {\n        disabled: true,\n    },\n    button: {\n        margin: theme.spacing(0.5),\n        whiteSpace: 'nowrap',\n        backgroundColor: '#e3c768',\n        color: 'white'\n    },\n    chip: {\n        margin: theme.spacing(0.5),\n        backgroundColor: '#e31b2f',\n        color: 'white'\n    },\n    close: {\n        padding: theme.spacing(0.5),\n    },\n}));\n\nconst Cooking = (props) => {\n    const classes = useStyles();\n    const columnMetaData = [\n        /*\n        {\n            title: 'Action',\n            field: 'action',\n            render: props => (\n                <div>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        onClick={(e,rowData) => {\n                            console.log('cooking button clicked');\n                            console.log(e);\n                            console.log(rowData);\n                        }} //props.onChange(e.target.value)\n                    >\n                        Ready to pickup\n                    </Button>\n                </div>\n            ),\n\n            cellStyle: {\n                padding: '3px 1px 3px 1px',\n            }\n        },\n        */\n        {\n            title: 'Id',\n            field: 'databaseId',\n            hidden: true\n        },\n        {\n            title: 'Status',\n            field: 'status',\n            cellStyle: {\n                //backgroundColor: '#e31b2f',\n                //color: 'white'\n                textAlign: 'center',\n                padding: '1px 1px 1px 1px',\n            },\n            render: props => (\n                <div>\n                    <Chip label=\"Cooking\" className={classes.chip}  />\n                </div>\n            ),\n        },\n        {\n            title: 'Order ID',\n            field: 'orderName',\n            //lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\n\n        },\n        { title: 'Order Time' ,\n            field: 'orderTime',\n            type: 'datetime',\n            cellStyle: {\n                padding: '1px 1px 1px 1px',\n            }\n        },\n        { title: 'Remark',\n            field: 'future',\n            cellStyle: {\n                padding: '1px 1px 1px 1px',\n            }\n        },\n        { title: 'Gross Total',\n            field: 'grossTotal',\n            type: 'currency' ,\n            currencySetting: {\n                currencyCode: 'THB'\n            }\n\n        },\n    ];\n\n    //Global state\n    const [{ appState ,dataState }, dispatch] = useStateValue();\n\n    //Local state     //const [intervalId,setIntervalId] = React.useState();\n    //Hook use Local state\n    const [state, setState] = React.useState({\n        columns: columnMetaData,\n        data: [\n            //{ status: 'cooking', future: '2019-07-17 13:30:15' , orderTime: '2019-07-17 13:00:15',storeName: 'Lab Avani', orderName: 'TPC ref 12345', grossTotal: \"323.25\", refID: \"12345\" },\n        ],\n    });\n    const [isLoading,setIsLoading] = React.useState(false);  //Data isloading when button has beenclicked\n\n\n    //loading data every interval\n    useEffect(() => {\n        async function freshOrdersInStore() {\n            var cuurentCooking =  [...dataState.order_instore].filter(order => {\n                return (order.cookingFinishTime === null || order.cookingFinishTime === '')\n                    && (order.pickupFinishTime === null || order.pickupFinishTime === '')\n            });\n            var queryAPI = [];\n\n            let get_url = '/api/v1/store/orders/1112delivery/'+appState.sitegroup+'/'+appState.store\n            console.group('GET '+get_url);\n            await axios.get(get_url)\n                .then((response)=>{\n                    if(response.data){\n                        var results = response.data;\n                        console.group('API return :');\n                        console.log(results);\n                        console.groupEnd();\n\n                        if (results.length > 0 ) {\n                            dispatch({\n                                type: 'FRESH_ORDER_INSTORE_SUCCESS',\n                                data: results\n                            });\n\n                            queryAPI = [...results].filter(order => {\n                                return (order.cookingFinishTime === null || order.cookingFinishTime === '')\n                                    && (order.pickupFinishTime === null || order.pickupFinishTime === '')\n                            });;\n                        }\n                        console.group('GlobalStateObject');\n                        console.log(appState);\n                        console.log(dataState);\n                        console.groupEnd();\n                    }\n                })\n                .then(() => {\n                    //Show snackbar if have new orders\n                    if(queryAPI.length > cuurentCooking.length){\n                        let diff = queryAPI.length - cuurentCooking.length;\n                        dispatch({\n                            type: 'SNACKBAR',\n                            data: {\n                                open: true,\n                                msg: 'You have new '+diff+' order(s)'\n                            }\n                        });\n                    }\n                })\n                .then( () =>{\n                    //Map data appstate to cooking line\n                    var orders = dataState.order_instore.length > 0 ? [...dataState.order_instore] : [];\n                    var cookingOrders = orders.filter(order => {\n                        return (order.cookingFinishTime === null || order.cookingFinishTime === '')\n                            && (order.pickupFinishTime === null || order.pickupFinishTime === '')\n                    });\n                    //console.log(cookingOrders);\n\n                    const cookingRows = cookingOrders.map(row => {\n                        var raw =  JSON.parse(row.json);\n                        return {\n                            databaseId: row.id,\n                            status: 'cooking',\n                            orderName: row.orderName,\n                            orderTime: row.tranDate,\n                            future: row.orderType === 0 ? '' : row.dueDate,\n                            grossTotal: raw.SDM.GrossTotal\n                        }\n                    });\n\n                    console.group('Rendering meterial-table '+cookingRows.length + ' record(s)');\n                    console.log(cookingRows);\n                    console.groupEnd();\n\n                    setState({\n                        columns: columnMetaData,\n                        data: [...cookingRows]\n                    });\n\n                })\n                .catch((error)=>{\n                    console.group('API Error :');\n                    console.log(error);\n                    console.groupEnd();\n                })\n            console.groupEnd();\n        }\n\n        freshOrdersInStore();\n        let id = setInterval(function () {\n            freshOrdersInStore();\n        },dataState.interval)\n        //setIntervalId(id);\n\n        return function cleanup() {\n            clearInterval(id);\n        };\n\n    },[]);\n\n    //On click button action\n    async function readyToPickupHandle(id ,orderId) {\n        let put_url = '/api/v1/store/order/1112delivery/'+id+'/cooking';\n        console.group('PUT '+put_url);\n        await axios.put(put_url,{\n            orderName: orderId\n        }).then((response) => {\n            var results = response.data;\n            console.group('API return :');\n            console.log(results);\n            console.groupEnd();\n\n            //Removing rowId\n            var copyState = [...state.data];\n            var removed = copyState.filter(order =>{\n                return order.databaseId !== id;\n            })\n            console.group('RowID['+id+' was removed');\n            console.groupEnd();\n\n            setState({\n                columns: columnMetaData,\n                data: removed\n            });\n            setIsLoading(false);\n\n            console.group('Rendering meterial-table');\n            console.log(removed);\n            console.groupEnd();\n        }).catch((error)=>{\n            console.group('API Error :');\n            console.log(error);\n            console.groupEnd();\n        })\n        console.groupEnd();\n    }\n\n    return (\n            <MaterialTable\n                title=\"Cooking\"\n                isLoading={isLoading}\n                columns={state.columns}\n                data={state.data}\n                actions={[\n                    rowData => ({\n                         icon: () => {\n                             return (\n                                 <div>\n                                     <Button\n                                         variant=\"contained\"\n                                         color=\"primary\"\n                                         className={classes.button}\n                                     >\n                                         Ready to pickup\n                                     </Button>\n                                 </div>\n                             );\n                         },\n                         tooltip: 'Ready to Pickup',\n                         onClick: (event,rowData) => {\n                             setIsLoading(true);\n                             readyToPickupHandle(rowData.databaseId,rowData.orderName);\n                         }\n                    })\n                ]}\n                actionsColumnIndex=\"1\"\n                filtering='true'\n                options={{\n                    padding: 'dense',\n                    pageSize: 10,\n                    search: false,\n                    showTitle: false,\n                    /*\n                    rowStyle: rowData => {\n                                            return {};                //if(rowData.status === \"\") {\n                                            //    return {backgroundColor: 'red'};\n                                            //}\n                                         }\n                     */\n                }}\n\n            />\n    );\n};\n\nexport default Cooking;\n\n/*\n//Map rows of freshing database to data table list to display\nuseMemo(() => {\n},[appState.order_instore]);\n*/\n/*\nuseEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    //[componentWillMount ,componentDidMount ,componentDidUpdate]\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n\n    //[componentWillUnmount()]\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  .MuiTableCell-sizeSmall {\n        padding: 1px 1px 1px 1px;\n    }\n  */"]},"metadata":{},"sourceType":"module"}