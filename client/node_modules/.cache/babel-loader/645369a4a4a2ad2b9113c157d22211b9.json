{"ast":null,"code":"import _slicedToArray from \"/Users/Macbook/WebstormProjects/mfg-4b-sz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Macbook/WebstormProjects/mfg-4b-sz/src/components/Store/Ordering/Cooking.js\";\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { AddBox, ArrowUpward } from \"@material-ui/icons\";\nimport { Button } from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MaterialTable from 'material-table';\nimport axios from './../../../api/axiosClient';\nimport { useStateValue } from './../../../global/state';\nconst useStyles = makeStyles(theme => ({\n  clicked: {\n    disabled: true\n  },\n  button: {\n    margin: theme.spacing(0.5)\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n    backgroundColor: '#e31b2f',\n    color: 'white'\n  }\n}));\n\nconst Cooking = props => {\n  const classes = useStyles();\n  const columnMetaData = [\n  /*\n  {\n      title: 'Action',\n      field: 'action',\n      render: props => (\n          <div>\n              <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  onClick={(e,rowData) => {\n                      console.log('cooking button clicked');\n                      console.log(e);\n                      console.log(rowData);\n                  }} //props.onChange(e.target.value)\n              >\n                  Ready to pickup\n              </Button>\n          </div>\n      ),\n       cellStyle: {\n          padding: '3px 1px 3px 1px',\n      }\n  },\n  */\n  {\n    title: 'Id',\n    field: 'databaseId',\n    hidden: true\n  }, {\n    title: 'Status',\n    field: 'status',\n    cellStyle: {\n      //backgroundColor: '#e31b2f',\n      //color: 'white'\n      textAlign: 'center',\n      padding: '1px 1px 1px 1px'\n    },\n    render: props => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Chip, {\n      label: \"Cooking\",\n      className: classes.chip,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))\n  }, {\n    title: 'Order ID',\n    field: 'orderName' //lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\n\n  }, {\n    title: 'Order Time',\n    field: 'orderTime',\n    type: 'datetime',\n    cellStyle: {\n      padding: '1px 1px 1px 1px'\n    }\n  }, {\n    title: 'Remark',\n    field: 'future',\n    cellStyle: {\n      padding: '1px 1px 1px 1px'\n    }\n  }, {\n    title: 'Gross Total',\n    field: 'grossTotal',\n    type: 'currency',\n    currencySetting: {\n      currencyCode: 'THB'\n    }\n  }]; //Global state\n\n  const _useStateValue = useStateValue(),\n        _useStateValue2 = _slicedToArray(_useStateValue, 2),\n        _useStateValue2$ = _useStateValue2[0],\n        appState = _useStateValue2$.appState,\n        dataState = _useStateValue2$.dataState,\n        dispatch = _useStateValue2[1]; //Local state     //const [intervalId,setIntervalId] = React.useState();\n  //Hook use Local state\n\n\n  const _React$useState = React.useState({\n    columns: columnMetaData,\n    data: [//{ status: 'cooking', future: '2019-07-17 13:30:15' , orderTime: '2019-07-17 13:00:15',storeName: 'Lab Avani', orderName: 'TPC ref 12345', grossTotal: \"323.25\", refID: \"12345\" },\n    ]\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1]; //loading data every interval\n\n\n  useEffect(() => {\n    async function freshOrdersInStore() {\n      console.group('freshOrdersInStore');\n      console.groupEnd();\n      let get_url = '/api/v1/store/orders/1112delivery/' + appState.sitegroup + '/' + appState.store;\n      await axios.get(get_url).then(response => {\n        if (response.data) {\n          var results = response.data;\n          console.group(get_url);\n          console.log('API return :');\n          console.log(results);\n          console.groupEnd();\n\n          if (results.length > 0) {\n            dispatch({\n              type: 'FRESH_ORDER_INSTORE_SUCCESS',\n              data: results\n            });\n          }\n\n          console.group('StateObject');\n          console.log(appState);\n          console.log(dataState);\n          console.groupEnd();\n        }\n      }).then(() => {\n        console.group('Rerender data table list');\n        console.log(dataState.order_instore.length + ' record(s)'); //Map data appstate to cooking line\n\n        var orders = dataState.order_instore.length > 0 ? [...dataState.order_instore] : [];\n        var cookingOrders = orders.filter(order => {\n          return (order.cookingFinishTime === null || order.cookingFinishTime == '') && (order.pickupFinishTime === null || order.pickupFinishTime == '');\n        });\n        console.log(cookingOrders);\n        const cookingRows = cookingOrders.map(row => {\n          var raw = JSON.parse(row.json);\n          return {\n            databaseId: row.id,\n            status: 'cooking',\n            orderName: row.orderName,\n            orderTime: row.tranDate,\n            future: row.orderType == 0 ? '' : row.dueDate,\n            grossTotal: raw.SDM.GrossTotal\n          };\n        });\n        setState({\n          columns: columnMetaData,\n          data: cookingRows\n        });\n        console.groupEnd();\n        console.group('DataTable StateObject');\n        console.log(state);\n        console.groupEnd();\n      }).catch(error => {\n        console.log('API error ,could not get data ' + error);\n      });\n    }\n\n    freshOrdersInStore();\n    let id = setInterval(function () {\n      freshOrdersInStore();\n    }, dataState.interval); //setIntervalId(id);\n\n    return function cleanup() {\n      clearInterval(id);\n    };\n  }, []); //Map rows of freshing database to data table list to display\n  //useMemo(() => {\n  //},[appState.order_instore]);\n\n  /*\n  useEffect(() => {\n      function handleStatusChange(status) {\n        setIsOnline(status.isOnline);\n      }\n       //[componentWillMount ,componentDidMount ,componentDidUpdate]\n      ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n       //[componentWillUnmount()]\n      // Specify how to clean up after this effect:\n      return function cleanup() {\n        ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n      };\n    });\n     .MuiTableCell-sizeSmall {\n          padding: 1px 1px 1px 1px;\n      }\n    */\n\n  async function readyToPickupHandle(id) {}\n\n  return React.createElement(MaterialTable, {\n    title: \"Cooking\",\n    columns: state.columns,\n    data: state.data,\n    actions: [rowData => ({\n      icon: 'delete',\n      tooltip: 'Ready to Pickup',\n      onClick: (event, rowData) => {\n        console.log('cooking button clicked');\n        console.log(event);\n        console.log(rowData);\n        readyToPickupHandle(rowData.databaseId);\n      }\n    })],\n    actionsColumnIndex: \"1\",\n    filtering: \"true\",\n    options: {\n      padding: 'dense',\n      pageSize: 10,\n      search: false,\n      showTitle: false,\n      //rowStyle: { backgroundColor: 'green'},\n      rowStyle: rowData => {\n        //if(rowData.status === \"\") {\n        //    return {backgroundColor: 'red'};\n        //}\n        return {};\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  });\n};\n\nexport default Cooking;","map":{"version":3,"sources":["/Users/Macbook/WebstormProjects/mfg-4b-sz/src/components/Store/Ordering/Cooking.js"],"names":["React","useCallback","useEffect","useMemo","AddBox","ArrowUpward","Button","Chip","makeStyles","MaterialTable","axios","useStateValue","useStyles","theme","clicked","disabled","button","margin","spacing","chip","backgroundColor","color","Cooking","props","classes","columnMetaData","title","field","hidden","cellStyle","textAlign","padding","render","type","currencySetting","currencyCode","appState","dataState","dispatch","useState","columns","data","state","setState","freshOrdersInStore","console","group","groupEnd","get_url","sitegroup","store","get","then","response","results","log","length","order_instore","orders","cookingOrders","filter","order","cookingFinishTime","pickupFinishTime","cookingRows","map","row","raw","JSON","parse","json","databaseId","id","status","orderName","orderTime","tranDate","future","orderType","dueDate","grossTotal","SDM","GrossTotal","catch","error","setInterval","interval","cleanup","clearInterval","readyToPickupHandle","rowData","icon","tooltip","onClick","event","pageSize","search","showTitle","rowStyle"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect ,useMemo} from 'react';\n\nimport { AddBox, ArrowUpward } from \"@material-ui/icons\";\nimport { Button } from '@material-ui/core'\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MaterialTable from 'material-table';\nimport axios from './../../../api/axiosClient';\nimport {useStateValue} from './../../../global/state'\n\n\nconst useStyles = makeStyles(theme => ({\n    clicked: {\n        disabled: true,\n    },\n    button: {\n        margin: theme.spacing(0.5),\n    },\n    chip: {\n        margin: theme.spacing(0.5),\n        backgroundColor: '#e31b2f',\n        color: 'white'\n    }\n}));\n\nconst Cooking = (props) => {\n    const classes = useStyles();\n    const columnMetaData = [\n        /*\n        {\n            title: 'Action',\n            field: 'action',\n            render: props => (\n                <div>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        onClick={(e,rowData) => {\n                            console.log('cooking button clicked');\n                            console.log(e);\n                            console.log(rowData);\n                        }} //props.onChange(e.target.value)\n                    >\n                        Ready to pickup\n                    </Button>\n                </div>\n            ),\n\n            cellStyle: {\n                padding: '3px 1px 3px 1px',\n            }\n        },\n        */\n        {\n            title: 'Id',\n            field: 'databaseId',\n            hidden: true\n        },\n        {\n            title: 'Status',\n            field: 'status',\n            cellStyle: {\n                //backgroundColor: '#e31b2f',\n                //color: 'white'\n                textAlign: 'center',\n                padding: '1px 1px 1px 1px',\n            },\n            render: props => (\n                <div>\n                    <Chip label=\"Cooking\" className={classes.chip}  />\n                </div>\n            ),\n        },\n        {\n            title: 'Order ID',\n            field: 'orderName',\n            //lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\n\n        },\n        { title: 'Order Time' ,\n            field: 'orderTime',\n            type: 'datetime',\n            cellStyle: {\n                padding: '1px 1px 1px 1px',\n            }\n        },\n        { title: 'Remark',\n            field: 'future',\n            cellStyle: {\n                padding: '1px 1px 1px 1px',\n            }\n        },\n        { title: 'Gross Total',\n            field: 'grossTotal',\n            type: 'currency' ,\n            currencySetting: {\n                currencyCode: 'THB'\n            }\n\n        },\n    ];\n\n    //Global state\n    const [{ appState ,dataState }, dispatch] = useStateValue();\n\n    //Local state     //const [intervalId,setIntervalId] = React.useState();\n    //Hook use Local state\n    const [state, setState] = React.useState({\n        columns: columnMetaData,\n        data: [\n            //{ status: 'cooking', future: '2019-07-17 13:30:15' , orderTime: '2019-07-17 13:00:15',storeName: 'Lab Avani', orderName: 'TPC ref 12345', grossTotal: \"323.25\", refID: \"12345\" },\n        ],\n    });\n\n    //loading data every interval\n    useEffect(() => {\n        async function freshOrdersInStore() {\n            console.group('freshOrdersInStore');\n            console.groupEnd();\n            let get_url = '/api/v1/store/orders/1112delivery/'+appState.sitegroup+'/'+appState.store\n            await axios.get(get_url)\n                .then((response)=>{\n                    if(response.data){\n                        var results = response.data;\n                        console.group(get_url);\n                        console.log('API return :');\n                        console.log(results);\n                        console.groupEnd();\n\n                        if (results.length > 0 ) {\n                            dispatch({\n                                type: 'FRESH_ORDER_INSTORE_SUCCESS',\n                                data: results\n                            });\n                        }\n                        console.group('StateObject');\n                        console.log(appState);\n                        console.log(dataState);\n                        console.groupEnd();\n                    }\n                })\n                .then(() =>{\n                    console.group('Rerender data table list');\n                    console.log(dataState.order_instore.length + ' record(s)')\n\n                    //Map data appstate to cooking line\n                    var orders = dataState.order_instore.length > 0 ? [...dataState.order_instore] : [];\n                    var cookingOrders = orders.filter(order => {\n                        return (order.cookingFinishTime === null || order.cookingFinishTime == '')\n                            && (order.pickupFinishTime === null || order.pickupFinishTime == '')\n                    });\n                    console.log(cookingOrders);\n\n                    const cookingRows = cookingOrders.map(row => {\n                        var raw =  JSON.parse(row.json);\n                        return {\n                            databaseId: row.id,\n                            status: 'cooking',\n                            orderName: row.orderName,\n                            orderTime: row.tranDate,\n                            future: row.orderType == 0 ? '' : row.dueDate,\n                            grossTotal: raw.SDM.GrossTotal\n                        }\n                    });\n\n                    setState({\n                        columns: columnMetaData,\n                        data: cookingRows\n                    });\n                    console.groupEnd();\n\n\n                    console.group('DataTable StateObject');\n                    console.log(state);\n                    console.groupEnd();\n                })\n                .catch((error)=>{\n                console.log('API error ,could not get data '+error )\n                })\n        }\n\n        freshOrdersInStore();\n        let id = setInterval(function () {\n            freshOrdersInStore();\n        },dataState.interval)\n        //setIntervalId(id);\n\n        return function cleanup() {\n            clearInterval(id);\n        };\n    },[]);\n\n    //Map rows of freshing database to data table list to display\n    //useMemo(() => {\n    //},[appState.order_instore]);\n\n    /*\n    useEffect(() => {\n        function handleStatusChange(status) {\n          setIsOnline(status.isOnline);\n        }\n\n        //[componentWillMount ,componentDidMount ,componentDidUpdate]\n        ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n\n        //[componentWillUnmount()]\n        // Specify how to clean up after this effect:\n        return function cleanup() {\n          ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n        };\n      });\n\n      .MuiTableCell-sizeSmall {\n            padding: 1px 1px 1px 1px;\n        }\n      */\n\n    async function readyToPickupHandle(id) {\n\n    }\n\n    return (\n        <MaterialTable\n            title=\"Cooking\"\n            columns={state.columns}\n            data={state.data}\n            actions={[\n                rowData => ({\n                     icon: 'delete',\n                     tooltip: 'Ready to Pickup',\n                     onClick: (event,rowData) => {\n                         console.log('cooking button clicked');\n                         console.log(event);\n                         console.log(rowData);\n                         readyToPickupHandle(rowData.databaseId);\n\n                     }\n                })\n            ]}\n            actionsColumnIndex=\"1\"\n            filtering='true'\n            options={{\n                padding: 'dense',\n                pageSize: 10,\n                search: false,\n                showTitle: false,\n                //rowStyle: { backgroundColor: 'green'},\n                rowStyle: rowData => {\n                    //if(rowData.status === \"\") {\n                    //    return {backgroundColor: 'red'};\n                    //}\n\n                    return {};\n                }\n            }}\n\n        />\n    );\n};\n\nexport default Cooking;"]},"metadata":{},"sourceType":"module"}